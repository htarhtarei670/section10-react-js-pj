{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Huawei\\\\Desktop\\\\09_section\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n//to bulid custom component on context file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const getLocalStorageLoggedIn = localStorage.getItem(\"isLoggedIn\");\n    if (getLocalStorageLoggedIn === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n  };\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.removeItem(\"isLoggedIn\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContextProvider, {\n    isLoggedIn: isLoggedIn,\n    onLogout: logoutHandler,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 12\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AuthContextProvider","props","_s","isLoggedIn","setIsLoggedIn","getLocalStorageLoggedIn","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","onLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","AuthContext","createContext","$RefreshReg$"],"sources":["C:/Users/Huawei/Desktop/09_section/src/store/auth-context.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\r\n\r\n//to bulid custom component on context file\r\nconst AuthContextProvider=(props)=>{\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  \r\n      useEffect(()=>{\r\n        const getLocalStorageLoggedIn=localStorage.getItem(\"isLoggedIn\");\r\n\r\n        if (getLocalStorageLoggedIn === \"1\") {\r\n         setIsLoggedIn(true);\r\n        } \r\n      },[])\r\n\r\n\r\n      const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        setIsLoggedIn(true);\r\n        localStorage.setItem(\"isLoggedIn\",\"1\");\r\n      };\r\n\r\n      const logoutHandler = () => {\r\n        setIsLoggedIn(false);\r\n        localStorage.removeItem(\"isLoggedIn\");\r\n      };\r\n\r\n\r\n    return(<AuthContextProvider  isLoggedIn={isLoggedIn} onLogout={logoutHandler} >{props.children}</AuthContextProvider>)\r\n}\r\n\r\nconst AuthContext=React.createContext(\r\n    {\r\n        isLoggedIn :false,\r\n        onLogout:()=>{}\r\n    }\r\n)\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,mBAAmB,GAAEC,KAAK,IAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAI;IACZ,MAAMS,uBAAuB,GAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEhE,IAAIF,uBAAuB,KAAK,GAAG,EAAE;MACpCD,aAAa,CAAC,IAAI,CAAC;IACpB;EACF,CAAC,EAAC,EAAE,CAAC;EAGL,MAAMI,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAN,aAAa,CAAC,IAAI,CAAC;IACnBE,YAAY,CAACK,OAAO,CAAC,YAAY,EAAC,GAAG,CAAC;EACxC,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BR,aAAa,CAAC,KAAK,CAAC;IACpBE,YAAY,CAACO,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC;EAGH,oBAAOd,OAAA,CAACC,mBAAmB;IAAEG,UAAU,EAAEA,UAAW;IAACW,QAAQ,EAAEF,aAAc;IAAAG,QAAA,EAAGd,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AACzH,CAAC;AAAAjB,EAAA,CA1BKF,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AA4BzB,MAAMqB,WAAW,gBAAC1B,KAAK,CAAC2B,aAAa,CACjC;EACInB,UAAU,EAAE,KAAK;EACjBW,QAAQ,EAACA,CAAA,KAAI,CAAC;AAClB,CACJ,CAAC;AAED,eAAeO,WAAW;AAAC,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}